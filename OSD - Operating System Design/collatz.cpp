/*
 * Docuementation: 
**Collatz Conjecture Program Documentation**

**Overview:**
This Collatz  program calculates and shows the sequence of numbers generated by applying the Collatz function. The collatz theorem states that for any positive integer, the sequence can be reduced to 1 by repeating the two steps. This program takes a positive integer as input and applies the colaltz and  prints each step in the sequence.

**Structure of the program:**
The program has a main function and a Collatz function.

**Main Function (int main(int argc, char *argv[])):**
- **Input:** The main function takes command-line arguments where the first argument is provided by the use which is a positive integer.
- **Output:** The program prints the Collatz sequence and the program is written to also handles the errors like providing no arguments
- **Details:**
  - Checks if the correct number of arguments are provided.
  - checks that only one positive integer is provided by the user as argument.
  - Converts the input ASCII argument to integer.
  - Creates a child process using `fork()` to execute the Collatz sequence.
  - Waits for the child process to finish.
  
**Collatz Function (int Collatz(int n)):**
- **Input:** The Collatz function takes a positive integer as input.
- **Output:** It prints the Collatz sequence for the input number .
- **Details:**
  - Checks if the input number is positive; if not, it prints an error message.
  - Applies the Collatz Conjecture to the input number and prints each step in the sequence.
  - Limits the number of steps to avoid infinite loops.
  
**Error Handling:**
The program performs error handling for various cases:
- Incorrect number of command-line arguments.
- Multiple command-line arguments.
- Input of a non-positive integer.

*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h> 

int Collatz(int n) {
    int c = 0; //count the number of steps 
    int max_limit = 10000;  // max limit is set to avoid running the while loop in infinite condition
    if (n <= 0) {
        printf("Please provide a positive integer\n");  // if negative integer is entered then asks the user to enter a positive number
        return 0; 
    }
    
    while (true) {  // Run the loop until number 1 is reached 
        if (n==1) {
            printf("%i", n);
            return 0;
        } else if (n%2==0) {   // check if the number is even
            printf("%i ", n);
            n = n/2;
        } else {
            printf("%i ", n); 
            n = n*3+1;  //if the number is odd multiply by 3 and add 1
        }
        if ( c> max_limit) {
            printf("\nExiting the loop because either the entered number is too large or while loop is running in infinite loop");
            return 0; // To avoid infinite while loop since we are using true in the condition
        }
        c++;
    }
    return 0;
}

int main(int argc, char *argv[]) {
    int n, st_lc = 0;
    pid_t pid; // Creates a Process ID
    
    if (argc == 1) {
        printf("Please provide a positive number after ./collatz\n");
        return 1;
    }
    else if(argc >2){
        printf("Please provide only one number and the entered number should be postive\n");
        return 1;
    }
    n = atoi(argv[1]); //This converts the ascii to integer
    
    pid = fork();  // Create a child process
    
    if (pid == -1) {
        printf("Failed to create child process\n");
    } else if (pid == 0) {
        Collatz(n); // Child process executes the Collatz function
        printf("\n");
    } else if (pid > 0) {
        wait(&st_lc); // Parent process waits for the child process to finish
    }
}

